Theming is a common requirement in many applications. It involves changing the look and feel of an application based on a set of predefined styles.

CSS Modules can be used to implement theming in a React application. One approach is to define a set of CSS classes for each theme in separate CSS modules, and then dynamically import the appropriate CSS module based on the current theme.

For example, let's say I have two themes, light and dark. I can create two CSS modules, LightTheme.module.css and DarkTheme.module.css, and define the styles for each theme:


// LightTheme.module.css
.body {
    background-color: white;
    color: black;
}

// DarkTheme.module.css
.body {
    background-color: black;
    color: white;
}
     



One of the key features of CSS Modules is that they scope CSS classes locally by default. This means that the CSS classes defined in a CSS module are tied to a specific component and won't interfere with the CSS classes of other components.

For example, let's say I have a CSS module named Button.module.css with a class .button:


// Button.module.css
.button {
    background-color: blue;
    color: white;
}
     
I can use this .button class in my Button component without worrying about it clashing with a .button class in another component or a global CSS file.

// Button.js
import React from 'react';
import styles from './Button.module.css';

const Button = () => {
    return (
    <button className={styles.button}>Click me</button>
    );
}

export default Button;




While CSS Modules scope CSS classes locally by default, they also support global scoping. This is useful when you want to define CSS classes that can be used across multiple components. To define a global CSS class, you use the :global keyword:


// App.module.css
:global .text-center {
    text-align: center;
}
     
In the above example, .text-center is a global CSS class that can be used in any component.

‍

Composing CSS Modules
Another powerful feature of CSS Modules is class composition. This allows you to create a new CSS class by combining other classes.

For example, let's say I have two CSS classes, .button and .large, in my CSS module:


// Button.module.css
.button {
    background-color: blue;
    color: white;
}

.large {
    padding: 20px;
}
     
I can create a new CSS class, .largeButton, by composing the .button and .large classes:


// Button.module.css
.button {
    background-color: blue;
    color: white;
}

.large {
    padding: 20px;
}

.largeButton {
    composes: button large;
}
     
In my Button component, I can now use the .largeButton class, which applies the styles of both the .button and .large classes:

// Button.js
import React from 'react';
import styles from './Button.module.css';

const Button = () => {
    return (
    <button className={styles.largeButton}>Click me</button>
    );
}

export default Button;
     
‍

Working with CSS Modules and Class Names
Understanding how to work with class names is crucial when using CSS Modules in a React project. Let's explore some of the best practices and techniques for managing class names with CSS Modules.

‍

Naming Conventions for CSS Modules
When working with CSS Modules, it's important to follow a consistent naming convention for your CSS classes. This makes your code easier to read and maintain and helps to avoid naming conflicts.

One popular naming convention is to use 'camelCase' for class names. This means that the first letter of each word (except for the first word) is capitalized. For example, 'myButton', 'mainContainer', 'headerTitle', etc.

Another approach is to use 'kebab-case', where words are separated by hyphens. For example, 'my-button', 'main-container', 'header-title', etc.

Regardless of the naming convention you choose, the key is to be consistent. This makes it easier for you and other developers to understand and work with your CSS code.

‍

Using Class Names with CSS Modules
When using CSS Modules in a React component, you import styles from a CSS module as a JavaScript object. This styles object contains the CSS classes defined in the CSS module.

To use a CSS class in your component, you reference it as a property of the styles object. For example, if you have a CSS class named 'button' in your CSS module, you can use it in your component like this:


// Button.js
import React from 'react';
import styles from './Button.module.css';

const Button = () => {
    return (
    <button className={styles.button}>Click me</button>
    );
}

export default Button;
     
In the above example, styles.button refers to the 'button' class in the CSS module.

If you want to apply multiple classes to an element, you can use the template literal syntax:


// Button.js
import React from 'react';
import styles from './Button.module.css';

const Button = () => {
    return (
    <button className={`${styles.button} ${styles.large}`}>Click me</button>
    );
}

export default Button;
     
In the above example, the button element has two classes: 'button' and 'large'. The template literal syntax allows you to combine multiple classes into a single string.

‍

Theming with CSS Modules
Theming is a common requirement in many applications. It involves changing the look and feel of an application based on a set of predefined styles.

CSS Modules can be used to implement theming in a React application. One approach is to define a set of CSS classes for each theme in separate CSS modules, and then dynamically import the appropriate CSS module based on the current theme.

For example, let's say I have two themes, light and dark. I can create two CSS modules, LightTheme.module.css and DarkTheme.module.css, and define the styles for each theme:


// LightTheme.module.css
.body {
    background-color: white;
    color: black;
}

// DarkTheme.module.css
.body {
    background-color: black;
    color: white;
}
     
In my App component, I can then dynamically import the appropriate CSS module based on the current theme:


    // App.js
import React from 'react';
import lightStyles from './LightTheme.module.css';
import darkStyles from './DarkTheme.module.css';

const App = ({ theme }) => {
    const styles = theme === 'light' ? lightStyles : darkStyles;

    return (
    <div className={styles.body}>
        Hello, world!
    </div>
    );
}

export default App;
     
In the above example, the 'styles' object contains the CSS classes for the current theme. The 'body' class changes the background color and text color of the 'div' element based on the theme.

By using CSS Modules for theming, you can create dynamic and flexible themes that can be easily switched at runtime.

‍